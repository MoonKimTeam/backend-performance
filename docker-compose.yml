version: '3'
services:
  #  # 공연 서비스
  #  performance-service:
  #    image: openjdk:17
  #    volumes:
  #      - ./volume/performance-service:/usr/src/app
  #    working_dir:
  #      /usr/src/app
  #    networks:
  #      - backend
  #    depends_on:
  #      - performance-db
  #    command:
  #      "java -jar performance-0.0.1-SNAPSHOT.jar"
  #    restart: on-failure
  # 공연 서비스 DB
  performance-db:
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      TZ: "Asia/Seoul"
      MYSQL_DATABASE: "performances"
      MYSQL_ROOT_PASSWORD: "1234"
    volumes:
      - ./volume/performance-db:/var/lib/mysql
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_LISTENERS: INTERNAL://:19092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      KAFKA_CREATE_TOPICS: "topic1:1:1"  # topicName:numPartitions:replicationFactor
    depends_on:
      - zookeeper
    networks:
      - backend

  redis:
    image: redis:latest
    ports:
      - "9999:6379"
    volumes:
      - ./volume/redis/data:/data
      - ./volume/redis/conf/redis.conf:/usr/local/conf/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    command: redis-server /usr/local/conf/redis.conf
    networks:
      - backend

networks:
  backend:
    driver: bridge