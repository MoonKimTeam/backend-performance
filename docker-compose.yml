version: '3'
services:
  # 공연 서비스
  concert-service:
    image: openjdk:17
    volumes:
      - ./volume/concert-service:/usr/src/app
    working_dir:
      /usr/src/app
    networks:
      - backend
    depends_on:
      - concert-db
  # 공연 서비스 DB
  concert-db:
    image: mysql:latest
    environment:
      TZ: "Asia/Seoul"
      MYSQL_DATABASE: "concerts"
      MYSQL_ROOT_PASSWORD: "1234"
    volumes:
      - ./volume/concert-db:/var/lib/mysql
    networks:
      - backend

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - ./volume/zookeeper/data:/data
      - ./volume/zookeeper/datalog:/datalog
      - ./volume/zookeeper/logs:/logs
    platform: linux/amd64
    networks:
      - backend

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CREATE_TOPICS: "topic1:1:1" # 토픽명:파티션 개수: 레플리카 개수
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - backend
    volumes:
      - ./volume/kafka/docker.sock:/var/run/docker.sock

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./volume/redis/data:/data
      - ./volume/redis/conf/redis.conf:/usr/local/conf/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    command: redis-server /usr/local/conf/redis.conf
    networks:
      - backend

networks:
  backend:
    driver: bridge